/**
 * 44th RAR Training Calendar System - AUTOMATED Backend
 * Complete rebuilt script with improved Discord notifications (no email exposure)
 */

// Configuration
const CONFIG = {
  CALENDAR_ID: PropertiesService.getScriptProperties().getProperty('CALENDAR_ID'),
  MAIN_SHEET_ID: PropertiesService.getScriptProperties().getProperty('MAIN_SHEET_ID'),
  ACCESS_SHEET_ID: PropertiesService.getScriptProperties().getProperty('ACCESS_SHEET_ID'),
  DISCORD_WEBHOOK: PropertiesService.getScriptProperties().getProperty('DISCORD_WEBHOOK'),
  BUFFER_MINUTES: 15,
  TIMEZONE: 'Europe/London'
};

// Main GET entry point
function doGet(e) {
  // Handle checkAccess action
  if (e.parameter.action === 'checkAccess') {
    const email = e.parameter.email.toLowerCase();
    return handleCheckAccess(email);
  }
  
  // Handle getInstructors action
  if (e.parameter.action === 'getInstructors') {
    return handleGetInstructors(e.parameter);
  }
  
  // Handle checkAvailability action
  if (e.parameter.action === 'checkAvailability') {
    return handleCheckAvailability(e.parameter);
  }
  
  // Handle createBooking action
  if (e.parameter.action === 'createBooking') {
    return handleCreateBooking(e.parameter);
  }
  
  // Handle createRequest action
  if (e.parameter.action === 'createRequest') {
    return handleCreateRequest(e.parameter);
  }
  
  // Handle getStats action
  if (e.parameter.action === 'getStats') {
    return handleGetStats(e.parameter);
  }
  
  return createResponse(false, 'Invalid action');
}

// Check access permissions
function handleCheckAccess(email) {
  try {
    const accessSheet = SpreadsheetApp.openById(CONFIG.ACCESS_SHEET_ID)
      .getSheetByName('Access');
    const data = accessSheet.getDataRange().getValues();
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] && data[i][0].toLowerCase() === email) {
        return createResponse(true, 'Access granted', {
          role: data[i][1] || 'member',
          name: data[i][2] || 'Unknown'
        });
      }
    }
    
    return createResponse(false, 'Access denied');
  } catch (error) {
    return createResponse(false, error.toString());
  }
}

// Get instructors for a specific training
function handleGetInstructors(data) {
  try {
    const instructorsSheet = SpreadsheetApp.openById(CONFIG.MAIN_SHEET_ID)
      .getSheetByName('Instructors');
    const instructorData = instructorsSheet.getDataRange().getValues();
    
    const instructors = [];
    
    for (let i = 1; i < instructorData.length; i++) {
      const row = instructorData[i];
      const category = row[0];
      const training = row[1];
      const instructor = row[2];
      
      // Match instructors by category (instructors are qualified for entire categories)
      // Case-insensitive matching for robustness
      if (category && instructor && 
          category.toLowerCase() === data.category.toLowerCase()) {
        instructors.push(instructor);
      }
    }
    
    return createResponse(true, 'Instructors retrieved', instructors);
  } catch (error) {
    return createResponse(false, error.toString());
  }
}

// Check availability for a time slot
function handleCheckAvailability(data) {
  try {
    const calendar = CalendarApp.getCalendarById(CONFIG.CALENDAR_ID);
    const startTime = new Date(`${data.date}T${data.time}:00`);
    const endTime = new Date(startTime.getTime() + (parseInt(data.duration) * 60000));
    
    // Add buffer time
    const bufferStart = new Date(startTime.getTime() - (CONFIG.BUFFER_MINUTES * 60000));
    const bufferEnd = new Date(endTime.getTime() + (CONFIG.BUFFER_MINUTES * 60000));
    
    const events = calendar.getEvents(bufferStart, bufferEnd);
    const available = events.length === 0;
    
    return createResponse(true, 'Availability checked', { available });
  } catch (error) {
    return createResponse(false, error.toString());
  }
}

// Create a new booking
function handleCreateBooking(data) {
  try {
    const calendar = CalendarApp.getCalendarById(CONFIG.CALENDAR_ID);
    const startTime = new Date(`${data.date}T${data.time}:00`);
    const endTime = new Date(startTime.getTime() + (parseInt(data.duration) * 60000));
    
    // Create calendar event
    const title = `${data.category} - ${data.training}`;
    const description = `Instructor: ${data.instructor}\nServer: ${data.server}\nZeus Required: ${data.zeusRequired || 'No'}\nGYN Required: ${data.gynRequired || 'No'}`;
    
    const event = calendar.createEvent(title, startTime, endTime, {
      description: description,
      location: data.server
    });
    
    // Add to spreadsheet
    const bookingsSheet = SpreadsheetApp.openById(CONFIG.MAIN_SHEET_ID)
      .getSheetByName('Bookings');
    
    const timestamp = new Date().toISOString();
    const server = data.serverOther || data.server;
    const instructor = data.instructorOther || data.instructor;
    
    bookingsSheet.appendRow([
      timestamp,
      data.category,
      data.training,
      data.date,
      data.time,
      data.duration,
      server,
      instructor,
      'Confirmed',
      data.zeusRequired || 'No',
      data.gynRequired || 'No'
    ]);
    
    // Format date and time for Discord
    const formattedDate = new Date(data.date).toLocaleDateString('en-GB', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    
    const formattedTime = new Date(`${data.date}T${data.time}:00`).toLocaleTimeString('en-GB', {
      hour: '2-digit',
      minute: '2-digit',
      timeZone: 'Europe/London'
    });
    
    // Send improved Discord notification
    sendDiscordNotification({
      embeds: [{
        title: "🎯 New Training Session Booked",
        description: `A new training session has been scheduled and confirmed.`,
        color: 0x4CAF50,
        fields: [
          {
            name: "📚 Training Details",
            value: `**${data.category.toUpperCase()}** - ${data.training}`,
            inline: false
          },
          {
            name: "📅 Date",
            value: formattedDate,
            inline: true
          },
          {
            name: "🕐 Time",
            value: `${formattedTime} BST`,
            inline: true
          },
          {
            name: "⏱️ Duration",
            value: `${data.duration} minutes`,
            inline: true
          },
          {
            name: "🖥️ Server",
            value: server,
            inline: true
          },
          {
            name: "👨‍🏫 Instructor",
            value: instructor,
            inline: true
          },
          {
            name: "⚡ Requirements",
            value: [
              data.zeusRequired === 'Yes' ? '⚡ Zeus Mod Required' : null,
              data.gynRequired === 'Yes' ? '🔧 GYN Mod Required' : null
            ].filter(Boolean).join('\n') || 'No special requirements',
            inline: false
          }
        ],
        timestamp: new Date().toISOString(),
        footer: {
          text: "44th Royal Anglian Regiment - Training Management System",
          icon_url: "https://cdn.discordapp.com/icons/your-server-id/your-icon.png"
        },
        thumbnail: {
          url: "https://cdn.discordapp.com/emojis/your-training-emoji.png"
        }
      }]
    });
    
    return createResponse(true, 'Booking created successfully!', {
      eventId: event.getId(),
      message: 'Training session booked successfully'
    });
    
  } catch (error) {
    return createResponse(false, error.toString());
  }
}

// Create a training request
function handleCreateRequest(data) {
  try {
    const requestsSheet = SpreadsheetApp.openById(CONFIG.MAIN_SHEET_ID)
      .getSheetByName('Requests');
    
    const timestamp = new Date().toISOString();
    const training = data.customTraining || data.training;
    
    requestsSheet.appendRow([
      timestamp,
      data.discordName,
      data.category,
      training,
      data.notes || '',
      'Pending',
      data.zeusRequired || 'No',
      data.gynRequired || 'No'
    ]);
    
    // Send improved Discord notification for training request
    sendDiscordNotification({
      embeds: [{
        title: "📝 New Training Request Submitted",
        description: `A training request has been submitted for review.`,
        color: 0xF4B643,
        fields: [
          {
            name: "👤 Requester",
            value: data.discordName || 'Anonymous',
            inline: true
          },
          {
            name: "📚 Category",
            value: data.category.toUpperCase() || 'Not specified',
            inline: true
          },
          {
            name: "🎯 Training",
            value: training || 'Not specified',
            inline: false
          },
          {
            name: "📋 Additional Notes",
            value: data.notes || 'None provided',
            inline: false
          },
          {
            name: "⚡ Requirements",
            value: [
              data.zeusRequired === 'Yes' ? '⚡ Zeus Mod Required' : null,
              data.gynRequired === 'Yes' ? '🔧 GYN Mod Required' : null
            ].filter(Boolean).join('\n') || 'No special requirements',
            inline: false
          }
        ],
        timestamp: new Date().toISOString(),
        footer: {
          text: "44th Royal Anglian Regiment - Training Request System",
          icon_url: "https://cdn.discordapp.com/icons/your-server-id/your-icon.png"
        },
        thumbnail: {
          url: "https://cdn.discordapp.com/emojis/your-request-emoji.png"
        }
      }]
    });
    
    return createResponse(true, 'Request submitted successfully!');
    
  } catch (error) {
    return createResponse(false, error.toString());
  }
}

// Get stats
function handleGetStats(data) {
  try {
    const bookingsSheet = SpreadsheetApp.openById(CONFIG.MAIN_SHEET_ID)
      .getSheetByName('Bookings');
    const requestsSheet = SpreadsheetApp.openById(CONFIG.MAIN_SHEET_ID)
      .getSheetByName('Requests');
    
    const bookingsData = bookingsSheet.getDataRange().getValues();
    const requestsData = requestsSheet.getDataRange().getValues();
    
    // Process bookings data
    const bookingsByCategory = {};
    const bookingsByServer = {};
    const bookingsByInstructor = {};
    const popularTimes = {};
    const upcomingBookings = [];
    
    for (let i = 1; i < bookingsData.length; i++) {
      const row = bookingsData[i];
      const category = row[1];
      const server = row[6];
      const instructor = row[7];
      const time = row[4];
      const date = new Date(row[3]);
      
      // Count by category
      bookingsByCategory[category] = (bookingsByCategory[category] || 0) + 1;
      
      // Count by server
      bookingsByServer[server] = (bookingsByServer[server] || 0) + 1;
      
      // Count by instructor
      bookingsByInstructor[instructor] = (bookingsByInstructor[instructor] || 0) + 1;
      
      // Count popular times
      const hour = time.split(':')[0];
      popularTimes[hour] = (popularTimes[hour] || 0) + 1;
      
      // Collect upcoming bookings
      if (date >= new Date()) {
        upcomingBookings.push({
          category: category,
          training: row[2],
          date: row[3],
          time: time,
          instructor: instructor,
          server: server
        });
      }
    }
    
    // Process requests data
    const requestsByCategory = {};
    const requestsByTraining = {};
    const recentRequests = [];
    
    for (let i = 1; i < requestsData.length; i++) {
      const row = requestsData[i];
      const category = row[2];
      const training = row[3];
      
      // Count by category
      requestsByCategory[category] = (requestsByCategory[category] || 0) + 1;
      
      // Count by training
      requestsByTraining[training] = (requestsByTraining[training] || 0) + 1;
      
      // Collect recent requests
      recentRequests.push({
        discordName: row[1],
        category: category,
        training: training,
        timestamp: row[0],
        status: row[5]
      });
    }
    
    return createResponse(true, 'Stats retrieved', {
      bookingsByCategory,
      bookingsByServer,
      bookingsByInstructor,
      popularTimes,
      requestsByCategory,
      requestsByTraining,
      upcomingBookings: upcomingBookings.slice(0, 10),
      recentRequests: recentRequests.slice(-10).reverse()
    });
    
  } catch (error) {
    return createResponse(false, error.toString());
  }
}

// Send Discord notification
function sendDiscordNotification(payload) {
  try {
    if (!CONFIG.DISCORD_WEBHOOK) {
      console.log('Discord webhook URL not configured');
      return;
    }
    
    const response = UrlFetchApp.fetch(CONFIG.DISCORD_WEBHOOK, {
      method: 'POST',
      contentType: 'application/json',
      payload: JSON.stringify(payload)
    });
    
    console.log('Discord notification sent:', response.getResponseCode());
    
  } catch (error) {
    console.error('Discord notification error:', error);
  }
}

// Helper function to create consistent responses
function createResponse(success, message, data = null) {
  const response = {
    success: success,
    message: message
  };
  
  if (data !== null) {
    response.data = data;
  }
  
  return ContentService
    .createTextOutput(JSON.stringify(response))
    .setMimeType(ContentService.MimeType.JSON);
}
